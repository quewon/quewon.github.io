/*! markdown-it-for-inline 2.0.1 https://github.com/markdown-it/markdown-it-for-inline @license MIT */
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, 
  global.markdownitForInline = factory());
})(this, (function() {
  "use strict";
  function for_inline_plugin(md, ruleName, tokenType, iterator) {
    function scan(state) {
      for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== "inline") continue;
        const inlineTokens = state.tokens[blkIdx].children;
        for (let i = inlineTokens.length - 1; i >= 0; i--) {
          if (inlineTokens[i].type !== tokenType) continue;
          iterator(inlineTokens, i);
        }
      }
    }
    md.core.ruler.push(ruleName, scan);
  }
  return for_inline_plugin;
}));
